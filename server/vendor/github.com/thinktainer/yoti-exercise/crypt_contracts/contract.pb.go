// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

/*
Package crypt_contracts is a generated protocol buffer package.

It is generated from these files:
	contract.proto

It has these top-level messages:
	EncryptRequest
	EncryptResponse
	DecryptRequest
	DecryptResponse
*/
package crypt_contracts

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncryptRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EncryptRequest) Reset()                    { *m = EncryptRequest{} }
func (m *EncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptRequest) ProtoMessage()               {}
func (*EncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EncryptResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *EncryptResponse) Reset()                    { *m = EncryptResponse{} }
func (m *EncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptResponse) ProtoMessage()               {}
func (*EncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DecryptRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DecryptRequest) Reset()                    { *m = DecryptRequest{} }
func (m *DecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptRequest) ProtoMessage()               {}
func (*DecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DecryptResponse struct {
	Decrypted string `protobuf:"bytes,1,opt,name=decrypted" json:"decrypted,omitempty"`
}

func (m *DecryptResponse) Reset()                    { *m = DecryptResponse{} }
func (m *DecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptResponse) ProtoMessage()               {}
func (*DecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*EncryptRequest)(nil), "crypt_contracts.EncryptRequest")
	proto.RegisterType((*EncryptResponse)(nil), "crypt_contracts.EncryptResponse")
	proto.RegisterType((*DecryptRequest)(nil), "crypt_contracts.DecryptRequest")
	proto.RegisterType((*DecryptResponse)(nil), "crypt_contracts.DecryptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Crypt service

type CryptClient interface {
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
}

type cryptClient struct {
	cc *grpc.ClientConn
}

func NewCryptClient(cc *grpc.ClientConn) CryptClient {
	return &cryptClient{cc}
}

func (c *cryptClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	out := new(EncryptResponse)
	err := grpc.Invoke(ctx, "/crypt_contracts.Crypt/Encrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := grpc.Invoke(ctx, "/crypt_contracts.Crypt/Decrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crypt service

type CryptServer interface {
	Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error)
	Decrypt(context.Context, *DecryptRequest) (*DecryptResponse, error)
}

func RegisterCryptServer(s *grpc.Server, srv CryptServer) {
	s.RegisterService(&_Crypt_serviceDesc, srv)
}

func _Crypt_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypt_contracts.Crypt/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypt_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypt_contracts.Crypt/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crypt_contracts.Crypt",
	HandlerType: (*CryptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _Crypt_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _Crypt_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0xcf, 0x2b,
	0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0x2e, 0xaa, 0x2c,
	0x28, 0x89, 0x87, 0x89, 0x16, 0x2b, 0x99, 0x71, 0xf1, 0xb9, 0xe6, 0x81, 0x05, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x80, 0x2c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x10,
	0x84, 0xa3, 0xa4, 0xcc, 0xc5, 0x0f, 0xd7, 0x57, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc0,
	0xc5, 0x9c, 0x9d, 0x5a, 0x09, 0xd5, 0x09, 0x62, 0x2a, 0x19, 0x71, 0xf1, 0xb9, 0xa4, 0xa2, 0x18,
	0x8e, 0xa1, 0x06, 0x6a, 0x1d, 0x13, 0xcc, 0x3a, 0x25, 0x7d, 0x2e, 0x7e, 0xb8, 0x1e, 0xa8, 0xc1,
	0x32, 0x5c, 0x9c, 0x29, 0x10, 0xa1, 0x54, 0x98, 0xc3, 0x10, 0x02, 0x46, 0xcb, 0x19, 0xb9, 0x58,
	0x9d, 0x41, 0x6c, 0x21, 0x3f, 0x2e, 0x76, 0xa8, 0x9b, 0x84, 0xe4, 0xf5, 0xd0, 0x3c, 0xaa, 0x87,
	0xea, 0x4b, 0x29, 0x05, 0xdc, 0x0a, 0x20, 0xb6, 0x2a, 0x31, 0x80, 0xcc, 0x83, 0x3a, 0x05, 0x8b,
	0x79, 0xa8, 0x1e, 0xc3, 0x62, 0x1e, 0x9a, 0x2f, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x71, 0x60, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x99, 0x3d, 0x2f, 0xb8, 0x95, 0x01, 0x00, 0x00,
}
